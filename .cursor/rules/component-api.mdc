---
description: 
globs: 
alwaysApply: false
---
---
source: https://github.com/elm-land/elm-land/blob/main/docs/concepts/components.md
---

# Components

## Overview


In a JavaScript framework like React or Vue.js, UI components are created in their own `.jsx` or `.vue` files. In general, these components are able to:

1. Take in "props" as initial arguments.
2. Emit events back to their parents.
3. Store their own internal state.
4. Define how they should render on the page.

The core design of Elm prevents us from sending API requests or other fancy stuff from our `view` function. This section will show you how to do all the same great stuff with `.elm` files.

Let's start by learning about the three kinds of components in Elm projects.

## The "123s" of Elm components

After exploring many different techniques for building Elm components, we've found a simple system that works great! We'll be referring to this system as "the 123s of Elm components", because of the three step system.

Each step will build on the last, so we'll learn them in order:

1. [Simple view functions](#_1-simple-view-functions)
1. [Configurable components](#_2-configurable-components)
1. [Stateful components](#_3-stateful-components)


## 1. Simple view functions

Let's start with the most simple kind of component in Elm: a `view` function! A view function can take in some values, and return some HTML. No side effects, no internal state– just a function.

Let's imagine we need to create a "Notification" component, based off the one we see in the official Bulma guide. This component looks something like this:

![A gray notification component, with a title, description, and a little "X" in the top-right corner](./images/component-1.jpg)


### Defining the component

Let's create a new file in `src/Components/Notification.elm`:

```elm
module Components.Notification exposing (view)

import Html exposing (..)
import Html.Attributes exposing (class)
import Html.Events exposing (onClick)


view :
    { title : String
    , description : String
    , onDismiss : msg
    }
    -> Html msg
view props =
    div [ class "notification" ]
        [ button [ class "delete", onClick props.onDismiss ] []
        , div []
            [ p [] [ strong [] [ text props.title ] ]
            , p [] [ text props.description ]
            ] 
        ]
```

Our `Components.Notification.view` function takes in a value called `props` with three fields:

1. `title` – The string to render in bolded text
1. `description` – Another string to render below the title
1. `onDismiss` – The `Msg` provided by the caller, that we should send when the "X" button is clicked!

It uses those three values to return some HTML that can be rendered by another page, layout, or component. 

The important thing to note is that the `props` passed into a simple function can contain __values to render__ like `String`, but also __messages to emit__ when an event (like `onClick`) comes in. 

Having the flexible, lowercase `msg` means we can use this component on _any_ page, as we'll see in the next section!

#### What about the CSS?

To keep the focus on how to structure your Elm components, we'll be using Bulma CSS, which provides classes we can use in our Elm files. To use Bulma in our Elm Land project, we can update our `elm-land.json` file to include the `<link>` tag:


```json { 10-12 }
{
  "app": {
    "elm": {
      "development": { "debugger": true },
      "production": { "debugger": false }
    },
    "env": [],
    "html": {
      // ...
      "link": [
        { "rel": "stylesheet", "href": "https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css" }
      ],
      // ...
    }
  }
}
```


### Using the component

Now that we have a `Components.Notification` component, we can use it anywhere we like! If we decide to use it on the homepage, we'll need to:

1. Import the `Components.Notification` module
2. Call the `Components.Notification.view` function

```elm
import Components.Notification

viewCreditCardNotification : Html Msg
viewCreditCardNotification =
    Components.Notification.view
        { title = "Your credit card expires soon!"
        , description = "The Visa credit card ending in [...] gaps in service."
        , onDismiss = DismissedNotification
        }
```

::: details "What HTML would get rendered in my browser?"

When you pass this data into your `Components.Notification.view` function, those
props would get mixed in with the other HTML to create this:

```html
<div class="notification">
  <button class="delete"></button>
  <div>
    <p><strong>Your credit card expires soon!</strong></p>
    <p>
      The Visa credit card ending in 1234 will expire on 08/24.
      Be sure to update your payment settings to avoid any
      gaps in service.
    </p>
  </div>
</div>
```

:::



## 2. Configurable components

Using a simple view function is always recommended, because of how easy they are to drop-in to your application. But what if you have a component that has a lot of variants? What if you have something like a "Button" component that can come in one of many styles?

![A button component with four colors](./images/component-2.jpg)
![The same button component, but with icons](./images/component-2.1.jpg)

With all the combinations of styles, sizes, disabled states, and more, using the simple `view` function approach can be a time-consuming process:

```elm
-- ❌ BEFORE: The tedious way, that we don't recommend!
viewCreatePostButton : Html Msg
viewCreatePostButton =
    Components.Button.view
        { label = "Create post"
        , onClick = ClickedCreatePost
        , style = Components.Button.Style.Default
        , size = Components.Button.Size.Normal
        , iconLeft = Nothing
        , iconRight = Nothing
        , isDisabled = False
        }
```

When everything needs to be provided, it can also be hard to tell what the right defaults are for a button. Lucky for us, there's an easier way: __the "Settings Pattern"!__ 


```elm
-- ✅ AFTER: The "Settings" pattern
viewCreatePostButton : Html Msg
viewCreatePostButton =
    Components.Button.new
        { label = "Create post"
        , onClick = ClickedCreatePost
        }
        |> Components.Button.view
```

This section of the guide will show you how to create components that only ask for __required props__, and allow you to use [Elm's "pipeline operator"](https://package.elm-lang.org/packages/elm/core/latest/Basics#(|%3E)) to __optionally pass in additional settings__.

### Defining the component

The big idea behind this design is to:

1. Define an "opaque" `Button` type ("opaque" means it won't expose its internal value)
2. Expose a `new` function, which turns required props into a `Button`
3. Expose a few "modifier" functions to provide any optional features
4. Expose a `view` function that converts the `Button` type into HTML for rendering

To see a visual example of how this works, let's look at an implementation of `Components.Button` that follows this pattern:

```elm
module Components.Button exposing
    ( Button, new
    , view
    , withStyleSuccess, withStyleWarning, withStyleDanger
    , withSizeSmall
    , withIconLeft, withIconRight
    , withIsDisabled
    )

{-|

## Basic usage

@docs Button, new
@docs view

## Modifiers

@docs withStyleSuccess, withStyleWarning, withStyleDanger
@docs withSizeSmall
@docs withIconLeft, withIconRight
@docs withDisabled

-}
import Components.Icon exposing (Icon)
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events



-- SETTINGS


type Button msg
    = Settings
        { label : String
        , onClick : msg
        , style : Style
        , size : Size
        , iconLeft : Maybe Icon
        , iconRight : Maybe Icon
        , isDisabled : Bool
        }


new : { label : String, onClick : msg } -> Button msg
new props =
    Settings
        { label = props.label
        , onClick = props.onClick
        , style = Default
        , size = Normal
        , iconLeft = Nothing
        , iconRight = Nothing
        , isOutlined = False
        , isDisabled = False
        }



-- MODIFIERS


type Style
    = Default
    | Success
    | Warning
    | Danger


withStyleSuccess : Button msg -> Button msg
withStyleSuccess (Settings settings) =
    Settings { settings | style = Success }


withStyleWarning : Button msg -> Button msg
withStyleWarning (Settings settings) =
    Settings { settings | style = Warning }


withStyleDanger : Button msg -> Button msg
withStyleDanger (Settings settings) =
    Settings { settings | style = Danger }


type Size
    = Normal
    | Small


withSizeSmall : Button msg -> Button msg
withSizeSmall (Settings settings) =
    Settings { settings | size = Small }


withIconLeft : Icon -> Button msg -> Button msg
withIconLeft icon (Settings settings) =
    Settings { settings | iconLeft = Just icon }


withIconRight : Icon -> Button msg -> Button msg
withIconRight icon (Settings settings) =
    Settings { settings | iconRight = Just icon }


withDisabled : Bool -> Button msg -> Button msg
withDisabled isDisabled (Settings settings) =
    Settings { settings | isDisabled = isDisabled }



-- VIEW


view : Button msg -> Html msg
view (Settings settings) =
    let
        viewOptionalIcon : Maybe Icon -> Html msg
        viewOptionalIcon maybeIcon =
            case maybeIcon of
                Just icon ->
                    Components.Icon.view icon

                Nothing ->
                    text ""
    in
    button
        [ Html.Events.onClick settings.onClick
        , class "button"
        , classList
            [ ( "is-success", settings.style == Success )
            , ( "is-warning", settings.style == Warning )
            , ( "is-danger", settings.style == Danger )
            , ( "is-small", settings.size == Small )
            ]
        , disabled settings.isDisabled
        ]
        [ viewOptionalIcon settings.iconLeft
        , text settings.label
        , viewOptionalIcon settings.iconRight
        ]

```

### Using the component

Now that we have this new `Components.Button` module, we can easily create standard buttons with only the `new` and `view` functions:

```elm
viewSignUpButton : Html msg
viewSignUpButton =
    Components.Button.new
        { label = "Sign up"
        , onClick = ClickedSignUp
        }
        |> Components.Button.view
```

![A simple, white button that says "Sign up"](./images/component-2-sign-up.jpg)

We can also customize our button by using our "modifier" functions with Elm's pipeline operator:

```elm
viewSignUpButton : Html msg
viewSignUpButton =
    Components.Button.new
        { label = "Delete account"
        , onClick = ClickedDeleteAccount
        }
        |> Components.Button.withStyleDanger
        |> Components.Button.withSizeSmall
        |> Components.Button.withIconRight Components.Icon.trash
        |> Components.Button.view
```

![A small, red button that reads "Delete account". It also has a trash icon on the right of the label.](./images/component-2-trash.jpg)


::: tip Extra resources

I first learned about this component design idea from Brian Hicks, in his talk ["Robot Buttons from Mars"](https://www.youtube.com/watch?v=PDyWP-0H4Zo). That talk introduces the benefits of the approach, and how it compares to similar alternatives.

This is the recommended way to define configurable stuff in Elm Land! :rainbow:
